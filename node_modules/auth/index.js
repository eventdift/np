//resource/auth/index.js

var vue = require("vue");
// URL and endpoint constants
const API_URL = 'http://localhost:3000/api/v1/'
const LOGIN_URL = API_URL + 'login/'
const SIGNUP_URL = API_URL + 'user/'
const LOGOUT_URL = API_URL + 'logout/'

module.exports= {

  // User object will let us check authentication status
  user: {
    authenticated: false
  },

  // Send a request to the login URL and save the returned JWT
  login(context, creds) {
    context.$http.post(LOGIN_URL, creds)
    .then((response)=>{
      context.running = false
      if(!response.data.errors){
        var token = response.data.token
        localStorage.setItem('id_token', token)
        this.user.authenticated = true
        vue.http.interceptors.push(function(request,next){
          request.headers.set('Authorization', 'Bearer ' +response.data.token)
          next();
        })
        context.$router.push({ path: 'share' })
      }else{
        context.errors = response.data
      }
    },(err) => {
      context.running = false
      context.errors = err.data
    })
  },

  signup(context, creds) {
    context.$http.post(SIGNUP_URL, creds)
    .then((response)=>{
      context.running = false
     if(!response.data.errors){
        var token = response.data.token
        localStorage.setItem('id_token', token)
        this.user.authenticated = true
        vue.http.interceptors.push(function(request,next){
          request.headers.set('Authorization', 'Bearer ' +response.data.token)
          next();
        })
        context.$router.push({ path: 'share' })
      }else{
        context.errors = response.data
      }
    },(err) => {
      context.running = false
      context.errors = err.data
    })
  },

  // To log out, we just need to remove the token
  logout(context) {
        localStorage.removeItem('id_token')
        this.user.authenticated = false
        context.$router.push({ path: 'login' })
  },
  checkAuth() {
    var jwt = localStorage.getItem('id_token')
    if(jwt) {
      this.user.authenticated = true
    }
    else {
      this.user.authenticated = false      
    }
  },

  // The object to be passed as a header for authenticated requests
  getAuthHeader() {
    return {
      'Authorization': 'Bearer ' + localStorage.getItem('access_token')
    }
  }
}